# Generated by Django 3.2.22 on 2023-11-07 03:01

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Charge_Capacity_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('time_stamp', models.DateTimeField(blank=True, null=True, verbose_name='时间戳')),
                ('charge_capacity', models.FloatField(null=True)),
                ('discharge_capacity', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Disassemble_Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('disassembly_time', models.DateTimeField(blank=True, null=True, verbose_name='拆解时间')),
                ('battery_module_id', models.CharField(max_length=256, null=True)),
                ('module_battery_model', models.CharField(max_length=256, null=True)),
                ('battery_category', models.CharField(max_length=256, null=True)),
                ('manufacturer', models.CharField(max_length=256, null=True)),
                ('nominal_capacity', models.IntegerField(null=True)),
                ('standard_voltage', models.FloatField(null=True)),
                ('weight', models.FloatField(null=True)),
                ('size', models.CharField(max_length=256, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Disassemble_Statistical_Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('disassemble_system_run_time', models.CharField(max_length=256, null=True)),
                ('disassemble_battery_num', models.CharField(max_length=256, null=True)),
                ('disassemble_battery_module_num', models.CharField(max_length=256, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Energy_Storage_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('time_stamp', models.DateTimeField(blank=True, null=True, verbose_name='时间戳')),
                ('energy_storage_unit_name', models.CharField(max_length=256, null=True)),
                ('voltage_1', models.FloatField(null=True)),
                ('voltage_2', models.FloatField(null=True)),
                ('voltage_3', models.FloatField(null=True)),
                ('voltage_4', models.FloatField(null=True)),
                ('voltage_5', models.FloatField(null=True)),
                ('voltage_6', models.FloatField(null=True)),
                ('voltage_7', models.FloatField(null=True)),
                ('voltage_8', models.FloatField(null=True)),
                ('electric_current', models.FloatField(null=True)),
                ('temp', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Energy_Storage_Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('energy_storage_unit_name', models.CharField(max_length=256, null=True)),
                ('battery_type', models.CharField(max_length=256, null=True)),
                ('battery_standard_voltage', models.FloatField(null=True)),
                ('energy_storage_unit_capacity', models.IntegerField(null=True)),
                ('energy_storage_unit_voltage', models.IntegerField(null=True)),
                ('group_mode', models.CharField(max_length=256, null=True)),
                ('run_time', models.FloatField(null=True)),
                ('run_day222', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ErrorLogs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('username', models.CharField(max_length=32, verbose_name='用户')),
                ('view', models.CharField(max_length=32, verbose_name='视图')),
                ('desc', models.TextField(verbose_name='描述')),
                ('ip', models.GenericIPAddressField(verbose_name='IP')),
                ('detail', models.TextField(verbose_name='详情')),
            ],
            options={
                'verbose_name': '错误日志',
                'verbose_name_plural': '错误日志',
                'db_table': 'monitor_errorlogs',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='External_Transaction_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.FloatField(null=True)),
                ('unit', models.FloatField(null=True)),
                ('example', models.FloatField(null=True)),
                ('collect_form', models.FloatField(null=True)),
                ('data_type', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Frequency_Modulation_Benefit_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('month', models.CharField(max_length=256, null=True)),
                ('frequency_mile', models.FloatField(null=True)),
                ('frequency_day', models.FloatField(null=True)),
                ('frequency_coefficient', models.FloatField(null=True)),
                ('frequency_subsidies', models.FloatField(null=True)),
                ('frequency_benefit', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IpBlackList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('ip', models.GenericIPAddressField(unique=True, verbose_name='IP')),
            ],
            options={
                'verbose_name': 'IP黑名单',
                'verbose_name_plural': 'IP黑名单',
                'db_table': 'monitor_ipblacklist',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Local_Electricity_Price',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('month', models.CharField(max_length=256, null=True)),
                ('province', models.CharField(max_length=256, null=True)),
                ('peak_price', models.FloatField(null=True)),
                ('top_price', models.FloatField(null=True)),
                ('valle_price', models.FloatField(null=True)),
                ('flat_price', models.FloatField(null=True)),
                ('public_subsidies', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OnlineUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('ip', models.GenericIPAddressField(verbose_name='IP')),
            ],
            options={
                'verbose_name': '在线用户123',
                'verbose_name_plural': '在线用户123',
                'db_table': 'monitor_onlineusers',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PeakVally_Benefit_Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('month', models.CharField(max_length=256, null=True)),
                ('charge_capacity', models.FloatField(null=True)),
                ('charge_time', models.CharField(max_length=256, null=True)),
                ('discharge_capacity', models.FloatField(null=True)),
                ('discharge_time', models.CharField(max_length=256, null=True)),
                ('Benefit', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Test_Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('recovery_time', models.DateTimeField(blank=True, null=True, verbose_name='回收时间')),
                ('battery_id', models.CharField(max_length=256, null=True)),
                ('battery_type', models.CharField(max_length=256, null=True)),
                ('battery_category', models.CharField(max_length=256, null=True)),
                ('manufacturer', models.CharField(max_length=256, null=True)),
                ('nominal_capacity', models.IntegerField(null=True)),
                ('standard_voltage', models.FloatField(null=True)),
                ('weight', models.FloatField(null=True)),
                ('size', models.CharField(max_length=256, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
